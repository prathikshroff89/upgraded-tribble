import { By, Key, until } from 'selenium-webdriver';
//import { driver, browser } from 'thousandeyes';
import { driver, markers, credentials, downloads, transaction } from 'thousandeyes';
import fetch from 'node-fetch';

runScript();

async function runScript() {
    
    await configureDriver();
    
    
    //await driver.get('https://sfdcb2b.intuit.com/');
    //Get the MFA Code 
    var eiamtapcredentials = await getEiamTapCredentials();
    await driver.get('http://sfdcb2b.intuit.com');

    await click(By.id(`username`));

    //await typeText('pshroff', By.id(`username`));
    await typeText(credentials.get('b2b_username'), By.id(`username`));


    //await driver.get('chrome-extension://pbdcmhnchplaclajlkjdmleiikkomaeb/newTabOverride/index.html');
    await click(By.id(`password`));
    //await click(By.id(`username`));
    await typeText(eiamtapcredentials['password'], By.id(`password`));

    //await typeText('pshroff', By.id(`username`));
    markers.set('Sign In');
    await driver.takeScreenshot();

    // // Click on 'Sign In'
    // await click(By.css(`[value="Sign In"]`));

    // // Click on 'Close'
    // await click(By.id(`tryLexDialogX`));
    // Click on 'Sign In'
    await click(By.css(`[value="Sign In"]`));
    await driver.switchTo().frame(driver.findElement(By.id(`duo_iframe`)))
    // Click on 'Log In'
    await click(By.id(`passcode`));
    // Click on 'passcode'
    await click(By.name(`passcode`));
    await typeText(eiamtapcredentials['duo_bypass_code'], By.name(`passcode`));
    // Click on 'Log In'
    await click(By.id(`passcode`));
    markers.set('DUO Log In');
    await driver.takeScreenshot();
    await driver.switchTo().defaultContent()
    markers.set('Back to Care Console');
    await driver.takeScreenshot();


    // Click on 'Back to Sales Console'
                                       //await driver.takeScreenshot();
    //await click(By.css(`[href="/console"]`));
    
    // Click on 'Care Console'
    //await click(By.id(`tsidLabel`));

    // Click on 'Sales Console'
    //await click(By.css(`.menuButtonMenuLink:nth-child(10)`));
    // Click on 'Back to Care Console'
    await click(By.css(`[href="/console"]`));

    await click(By.id(`phSearchInput`));

    await click(By.id(`phSearchInput`));

    await typeText('9130348428425596', By.id(`phSearchInput`));

    await pressEnter(By.id(`phSearchInput`));

    await driver.switchTo().frame(driver.findElement(By.css(`iframe[src^="/_ui/search/ui/UnifiedSearchResults?"]`)))
    //await driver.switchTo().frame(0)

    // Click on 'Carolyn Test Triathlon'
    //await click(By.xpath(`//*[@id="Account_body"]/table/tbody/tr[2]/th/a`));
    await driver.findElement(By.linkText(`Account Detail`)).click();
    //await click(By.css(`[href="javascript:srcUp(%27%2F0012A00002YVZSR%3FsrPos%3D1%26srKp%3D001%26isdtp%3Dvw%27);"]`));

    await driver.switchTo().defaultContent()

    //await click(By.id(`ext-comp-1039`));
    
    await driver.switchTo().frame(driver.findElement(By.css(`iframe[src^="/apex/AccountDetailOverride?"]`)))

    // Click on 'New QBO Order'
    await click(By.css(`#topButtonRowacctDetail_j_id14 > [name="new_qbo_order"]`));

    await click(By.css(`[data-aura-rendered-by="32:0"]`));

    // Click on 'Next'
    await click(By.css(`[data-aura-rendered-by="105:0"]`));

    await driver.switchTo().defaultContent()

    //await driver.switchTo().frame(driver.findElement(By.css(`iframe:nth-child(47)`)))
    await driver.switchTo().frame(driver.findElement(By.css(`iframe[src^="/apex/c__OnlineSalesCatalogSkuid?"]`)))


    await click(By.css(`#sk-3Jwz8R-411 > .sk-grid-division:nth-child(2)`));

    // Click on 'PRODUCT'
	await click(By.css(`[data-guid="14183"]`));

    // Click on 'PRODUCT'
	await click(By.css(`[data-guid="14605"]`));

    // Click on 'QuickBooks Online Simple Start'
	await click(By.css(`[data-uid="14619"] > .nx-fieldtext`));

    // Click on 'QuickBooks Online Simple Start'
	await click(By.css(`[data-uid="14619"] > .nx-fieldtext`));

    // Click on 'Next - Order Details'
	await click(By.css(`#nextOrderDetailButton > .ui-button-text`));

    await click(By.css(`[data-uid="17700"] input`));

    await typeText('7555 Torrey Santa Fe Rd', By.css(`[data-uid="17700"] input`));

    await typeText('San Diego', By.css(`[data-uid="17709"] input`));

    await selectOption(By.css(`select:nth-child(1)`), By.css(`[value="CA"]`));

    await typeText('92129', By.css(`[data-uid="17756"] input`));

    // Click on 'Next - Order'
	await click(By.css(`#sk-2OPf3Y-925 > .ui-button-text`));

    await click(By.css(`[data-uid="18196"] input`));

    await typeText('Synthetic Monitoring', By.css(`[data-uid="18196"] input`));

    await driver.switchTo().defaultContent()

    await click(By.id(`userNavLabel`));

    // Click on 'Logout'
	await click(By.id(`app_logout`));
    
}

async function getOAuthToken() {
  // Default options are marked with *
  markers.start('getOAuthToken');
  
  var data = "grant_type=client_credentials&client_id=" + credentials.get('client_id') + "&client_secret=" + credentials.get('client_secret') + ""; // body data type must match "Content-Type" header
  
  const response = await fetch('https://oauth2-aws.api.intuit.com/oauth2/v1/tokens/bearer', {
    method: 'POST', // *GET, POST, PUT, DELETE, etc.
    headers: {
      //   'Content-Type': 'application/json'
      'Content-Type': 'application/x-www-form-urlencoded' 
    },
    body: data 
    }
);
  if (!response.ok) {     
    throw new Error('non-200 response');
  }
  markers.stop('getOAuthToken');
  return response.json(); // parses JSON response into native JavaScript objects
}
async function getEiamTapCredentials() {
  // Default options are marked with *
  markers.start('getEiamTapCredentials');
  var token = await getOAuthToken();
  const response = await fetch('https://eiamtapcredentials.api.intuit.com/v1/credentials/'+ credentials.get('b2b_username'), {
    method: 'GET', // *GET, POST, PUT, DELETE, etc.
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer ' + token['access_token'] 
      } 
    }
);
  if (!response.ok) {
    throw new Error('non-200 response');
  }
  markers.stop('getEiamTapCredentials');
  return response.json(); // parses JSON response into native JavaScript objects
}


async function configureDriver() {
    await driver.manage().window().setRect({ 
        width: 1200, 
        height: 901
    });
    await driver.manage().setTimeouts({
        implicit: 20 * 1000, // If an element is not found, reattempt for this many milliseconds
    });
}



async function click(selector) {
    await simulateHumanDelay();

    const configuredTimeouts = await driver.manage().getTimeouts();
    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;

    await reattemptUntil(attemptToClick, clickAttemptEndTime);
    
    async function attemptToClick() {
        await driver.findElement(selector)
                    .click();
    }
}

async function reattemptUntil(attemptActionFn, attemptEndTime) {
    const TIME_BETWEEN_ATTEMPTS = 100;
    let numberOfAttempts = 0;
    let attemptError;
    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {
        try {
            numberOfAttempts += 1;
            await attemptActionFn();
        }
        catch (error) {
            attemptError = error;
            await driver.sleep(TIME_BETWEEN_ATTEMPTS);
            continue; // Attempt failed, reattempt
        }
        attemptError = null;
        break; // Attempt succeeded, stop attempting
    }

    const wasAttemptSuccessful = !attemptError;
    if (!wasAttemptSuccessful) {
        throw attemptError;
    }
}

async function simulateHumanDelay() {
    await driver.sleep(550);
}

async function typeText(value, selector) {
    await simulateHumanDelay();
    const element = await driver.findElement(selector);
    await element.clear();
    await element.sendKeys(value);
}

async function pressEnter(selector) {
    await driver.findElement(selector)
                .sendKeys(Key.RETURN);
}

async function selectOption(selectSelector, optionSelector) {
    await simulateHumanDelay();
    await driver.findElement(selectSelector)
                .findElement(optionSelector)
                .click();
}