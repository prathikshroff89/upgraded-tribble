import { By, Key, until } from 'selenium-webdriver';
import { driver, markers, credentials, downloads, transaction, authentication } from 'thousandeyes';
import fetch from 'node-fetch';

runScript();

async function runScript() {
    
    await configureDriver();
        
    markers.start('login');

    //Get the MFA Code 
    var eiamtapcredentials = await getEiamTapCredentials();

    await driver.get('https://sfdcb2c.intuit.com/');

    await click(By.id(`username`));

    await typeText(credentials.get('sfdc-b2c-mfa-user-name-07'), By.id(`username`));

    await click(By.id(`password`));

    await typeText(eiamtapcredentials['password'], By.id(`password`));
    //await typeText(credentials.get('sfdc-b2c-nomfa-user-password-01'), By.id(`password`));

    await driver.takeScreenshot();

    // Click on 'Sign In'
    await click(By.css(`[value="Sign In"]`));

    await driver.switchTo().frame(driver.findElement(By.id(`duo_iframe`)));

    // Click on 'Log In'
    await click(By.id(`passcode`));

    // Click on 'passcode'
    await click(By.name(`passcode`));

    await typeText(eiamtapcredentials['duo_bypass_code'], By.name(`passcode`));

    // Click on 'Log In'
    await click(By.id(`passcode`));

    markers.stop('login');
    
    // Switch back to outer frame
    await driver.switchTo().defaultContent();

    // Click on 'OK'
    await click(By.css(`#ext-comp-1003 .x-btn-mc`));

    
    markers.start('order search');
    await click(By.xpath(`//*[@id="oneHeader"]/div[3]/div/div[1]/div[3]/div/button`));

    await click(By.css(`a[title="Order Search"]`));

    markers.stop('order search');
    
    await driver.takeScreenshot();
    
    markers.start('search by order number');
    await driver.switchTo().frame(driver.findElement(By.xpath(`/html/body/div[4]/div[1]/div[2]/div[1]/div/div/div/div/div/div/div/div/div/div/article/div[2]/div/force-aloha-page/div/iframe`)));

    // Click on 'ORDERNO'
    await click(By.css(`[value="ORDERNO"]`));

    await typeText('SFDCCA131668413', By.css(`#j_id0\\3Aj_id7\\3Asearch_flds\\3Aorder_no_fld`));
     
    // Click on 'Search'
    await click(By.css(`#j_id0\\3Aj_id7\\3Asearch_flds\\3Aj_id64\\3A bottom\\3Aj_id65`));

     markers.stop('search by order number');

    // Make driver sleep for 5 seconds
    await driver.sleep(1000);

    markers.start('order search results');
    // Click on 'SFDCCA131668413'

    await click(By.css(`a`));

    await driver.takeScreenshot();

    await driver.switchTo().defaultContent()

    markers.stop('order search results');
    
    await driver.takeScreenshot();

    // Make driver sleep for 5 seconds
    await driver.sleep(1000);

    await click(By.css(`a[title="Order_Detail"]`));

    await driver.takeScreenshot();

    //await click(By.css(`a[title="Close Tab"]`));
    //await click(By.className(`slds-dropdown__item closeTab`));
    
}

async function configureDriver() {
    await driver.manage().window().setRect({ 
        width: 1200, 
        height: 1288
    });
    await driver.manage().setTimeouts({
        implicit: 7 * 1000, // If an element is not found, reattempt for this many milliseconds
    });
}



async function click(selector) {
    await simulateHumanDelay();

    const configuredTimeouts = await driver.manage().getTimeouts();
    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;

    await reattemptUntil(attemptToClick, clickAttemptEndTime);
    
    async function attemptToClick() {
        await driver.findElement(selector)
                    .click();
    }
}

async function reattemptUntil(attemptActionFn, attemptEndTime) {
    const TIME_BETWEEN_ATTEMPTS = 100;
    let numberOfAttempts = 0;
    let attemptError;
    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {
        try {
            numberOfAttempts += 1;
            await attemptActionFn();
        }
        catch (error) {
            attemptError = error;
            await driver.sleep(TIME_BETWEEN_ATTEMPTS);
            continue; // Attempt failed, reattempt
        }
        attemptError = null;
        break; // Attempt succeeded, stop attempting
    }

    const wasAttemptSuccessful = !attemptError;
    if (!wasAttemptSuccessful) {
        throw attemptError;
    }
}

async function simulateHumanDelay() {
    await driver.sleep(550);
}

async function typeText(value, selector) {
    await simulateHumanDelay();
    const element = await driver.findElement(selector);
    await element.clear();
    await element.sendKeys(value);
}

async function getOAuthToken() {
    // Default options are marked with *
    markers.start('getOAuthToken');

    var data = "grant_type=client_credentials&client_id=" + credentials.get('client_id') + "&client_secret=" + credentials.get('client_secret') + ""; // body data type must match "Content-Type" header

    const response = await fetch('https://oauth2-aws.api.intuit.com/oauth2/v1/tokens/bearer', {
        method: 'POST', // *GET, POST, PUT, DELETE, etc.
        headers: {
        //   'Content-Type': 'application/json'
        'Content-Type': 'application/x-www-form-urlencoded' 
        },
        body: data 
    });

    if (!response.ok) {
        var errorStatus = response['status'];
        var errorStatusCode = response['statusText'];
        throw new Error('non-200 response error. The status of \"' + errorStatus + '\":\"' + errorStatusCode +'\"  was returned.');
    }
    markers.stop('getOAuthToken');

    return response.json(); // parses JSON response into native JavaScript objects
}

async function getEiamTapCredentials() {
    // Default options are marked with *
    markers.start('getEiamTapCredentials');

    var token = await getOAuthToken();

    const response = await fetch('https://eiamtapcredentials.api.intuit.com/v1/credentials/'+ credentials.get('sfdc-b2c-mfa-user-name-07'), {
        method: 'GET', // *GET, POST, PUT, DELETE, etc.
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + token['access_token'] 
        } 
    });

  if (!response.ok) {
    var errorStatus = response['status'];
    var errorStatusCode = response['statusText'];
    throw new Error('non-200 response error. The status of \"' + errorStatus + '\":\"' + errorStatusCode +'\"  was returned.');
  }

    markers.stop('getEiamTapCredentials');

    return response.json(); // parses JSON response into native JavaScript objects
}